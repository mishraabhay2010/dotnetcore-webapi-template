apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{values.component_id | dump}}
  {%- if values.description %}
  description: ${{values.description | dump}}
  {%- endif %}
  annotations:
    github.com/project-slug: ${{values.destination.owner + "/" + values.destination.repo}}
    backstage.io/techdocs-ref: dir:.
    gocd.org/pipelines: ${{values.pipelineName }}
    jira/project-key: SCRUM
spec:
  type: service
  lifecycle: production
  owner: ${{values.owner | dump}}
  providesApis: [${{values.component_id}}]
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: ${{values.component_id}}
  description: API definition for the .NET Core Web API project
spec:
  type: openapi
  lifecycle: production
  owner: team-a
  system: examples
  definition: |
    openapi: 3.0.1
    info:
      title: Dotnet.Samples.AspNetCore.WebApi
      description: ðŸ§ª Proof of Concept for a Web API (Async) made with .NET 8 (LTS) and ASP.NET Core 8.0
      contact:
        name: GitHub
        url: ${{values.destination.repo}}
      license:
        name: MIT License
        url: https://opensource.org/license/mit
      version: 1.0.0
    paths:
      /Players:
        post:
          tags:
            - Players
          summary: Creates a Player
          requestBody:
            description: Player
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Player'
          responses:
            '201':
              description: Created
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Player'
            '400':
              description: Bad Request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
            '409':
              description: Conflict
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
        get:
          tags:
            - Players
          summary: Retrieves all players
          responses:
            '200':
              description: OK
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Player'
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
      /Players/{id}:
        get:
          tags:
            - Players
          summary: Retrieves a Player by its Id
          parameters:
            - name: id
              in: path
              description: Player.Id
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: OK
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Player'
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
        put:
          tags:
            - Players
          summary: Updates (entirely) a Player by its Id
          parameters:
            - name: id
              in: path
              description: Player.Id
              required: true
              schema:
                type: integer
                format: int64
          requestBody:
            description: Player
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Player'
          responses:
            '204':
              description: No Content
            '400':
              description: Bad Request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
        delete:
          tags:
            - Players
          summary: Deletes a Player by its Id
          parameters:
            - name: id
              in: path
              description: Player.Id
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '204':
              description: No Content
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
      /Players/squadNumber/{squadNumber}:
        get:
          tags:
            - Players
          summary: Retrieves a Player by its Squad Number
          parameters:
            - name: squadNumber
              in: path
              description: Player.SquadNumber
              required: true
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: OK
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Player'
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProblemDetails'
    components:
      schemas:
        Player:
          required:
            - abbrPosition
            - firstName
            - lastName
            - position
            - squadNumber
          type: object
          properties:
            id:
              type: integer
              format: int64
            firstName:
              minLength: 1
              type: string
            middleName:
              type: string
              nullable: true
            lastName:
              minLength: 1
              type: string
            dateOfBirth:
              type: string
              format: date-time
              nullable: true
            squadNumber:
              type: integer
              format: int32
            position:
              minLength: 1
              type: string
            abbrPosition:
              minLength: 1
              type: string
            team:
              type: string
              nullable: true
            league:
              type: string
              nullable: true
            starting11:
              type: boolean
          additionalProperties: false
        ProblemDetails:
          type: object
          properties:
            type:
              type: string
              nullable: true
            title:
              type: string
              nullable: true
            status:
              type: integer
              format: int32
              nullable: true
            detail:
              type: string
              nullable: true
            instance:
              type: string
              nullable: true
          additionalProperties: {}
